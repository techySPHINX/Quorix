"""
Revision ID: 592146b3dc13
Revises: fdb04f309495
Create Date: 2025-09-14 21:03:25.149710+00:00
"""

from __future__ import annotations

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "592146b3dc13"
down_revision = "fdb04f309495"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=True),
        sa.Column(
            "role",
            sa.Enum("USER", "ADMIN", "SUPER_ADMIN", name="userrole"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("last_login", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        postgresql_tablespace="pg_default",
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(
            "idx_user_active_role", ["is_active", "role"], unique=False
        )
        batch_op.create_index(
            "idx_user_created_role", ["created_at", "role"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_users_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_users_email"), ["email"], unique=True)
        batch_op.create_index(
            batch_op.f("ix_users_full_name"), ["full_name"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_users_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_users_is_active"), ["is_active"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_users_last_login"), ["last_login"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_users_role"), ["role"], unique=False)

    op.create_table(
        "events",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("start_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("end_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("location", sa.String(length=200), nullable=True),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("capacity", sa.Integer(), nullable=False),
        sa.Column("available_tickets", sa.Integer(), nullable=False),
        sa.Column("organizer_id", sa.Integer(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["organizer_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        postgresql_tablespace="pg_default",
    )
    with op.batch_alter_table("events", schema=None) as batch_op:
        batch_op.create_index(
            "idx_event_available_tickets", ["available_tickets"], unique=False
        )
        batch_op.create_index(
            "idx_event_date_active", ["start_date", "is_active"], unique=False
        )
        batch_op.create_index(
            "idx_event_date_location", ["start_date", "location"], unique=False
        )
        batch_op.create_index(
            "idx_event_location_date", ["location", "start_date"], unique=False
        )
        batch_op.create_index(
            "idx_event_organizer_active", ["organizer_id", "is_active"], unique=False
        )
        batch_op.create_index(
            "idx_event_price_date", ["price", "start_date"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_events_available_tickets"),
            ["available_tickets"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_events_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_events_end_date"), ["end_date"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_events_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_events_is_active"), ["is_active"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_events_location"), ["location"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_events_name"), ["name"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_events_organizer_id"), ["organizer_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_events_price"), ["price"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_events_start_date"), ["start_date"], unique=False
        )

    op.create_table(
        "notification_preferences",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("email_enabled", sa.Boolean(), nullable=False),
        sa.Column("in_app_enabled", sa.Boolean(), nullable=False),
        sa.Column("sms_enabled", sa.Boolean(), nullable=False),
        sa.Column("push_enabled", sa.Boolean(), nullable=False),
        sa.Column("booking_confirmations", sa.Boolean(), nullable=False),
        sa.Column("booking_cancellations", sa.Boolean(), nullable=False),
        sa.Column("event_reminders", sa.Boolean(), nullable=False),
        sa.Column("waitlist_notifications", sa.Boolean(), nullable=False),
        sa.Column("payment_updates", sa.Boolean(), nullable=False),
        sa.Column("event_updates", sa.Boolean(), nullable=False),
        sa.Column("system_announcements", sa.Boolean(), nullable=False),
        sa.Column("marketing_emails", sa.Boolean(), nullable=False),
        sa.Column("quiet_hours_start", sa.String(length=5), nullable=True),
        sa.Column("quiet_hours_end", sa.String(length=5), nullable=True),
        sa.Column("timezone", sa.String(length=50), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("notification_preferences", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_notification_preferences_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notification_preferences_user_id"), ["user_id"], unique=True
        )

    op.create_table(
        "notifications",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "BOOKING_CONFIRMATION",
                "BOOKING_CANCELLATION",
                "EVENT_REMINDER",
                "WAITLIST_NOTIFICATION",
                "PAYMENT_RECEIVED",
                "EVENT_UPDATE",
                "SYSTEM_ANNOUNCEMENT",
                "PASSWORD_RESET",
                "WELCOME",
                name="notificationtype",
            ),
            nullable=False,
        ),
        sa.Column(
            "priority",
            sa.Enum("LOW", "NORMAL", "HIGH", "URGENT", name="notificationpriority"),
            nullable=False,
        ),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("message", sa.Text(), nullable=False),
        sa.Column("data", sa.Text(), nullable=True),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("read_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("notifications", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_notifications_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_notifications_is_read"), ["is_read"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notifications_priority"), ["priority"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notifications_type"), ["type"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notifications_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "bookings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.Column(
            "booked_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("number_of_tickets", sa.Integer(), nullable=False),
        sa.Column("total_price", sa.Numeric(precision=10, scale=2), nullable=True),
        sa.Column(
            "status",
            sa.Enum("PENDING", "CONFIRMED", "CANCELLED", name="bookingstatus"),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        postgresql_tablespace="pg_default",
    )
    with op.batch_alter_table("bookings", schema=None) as batch_op:
        batch_op.create_index(
            "idx_booking_date_status", ["booked_at", "status"], unique=False
        )
        batch_op.create_index(
            "idx_booking_event_date", ["event_id", "booked_at"], unique=False
        )
        batch_op.create_index(
            "idx_booking_event_status", ["event_id", "status"], unique=False
        )
        batch_op.create_index(
            "idx_booking_status_date", ["status", "booked_at"], unique=False
        )
        batch_op.create_index(
            "idx_booking_user_date", ["user_id", "booked_at"], unique=False
        )
        batch_op.create_index(
            "idx_booking_user_status", ["user_id", "status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_bookings_booked_at"), ["booked_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_bookings_event_id"), ["event_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_bookings_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_bookings_status"), ["status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_bookings_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "notification_deliveries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("notification_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "channel",
            sa.Enum("EMAIL", "IN_APP", "SMS", "PUSH", name="notificationchannel"),
            nullable=False,
        ),
        sa.Column(
            "type",
            sa.Enum(
                "BOOKING_CONFIRMATION",
                "BOOKING_CANCELLATION",
                "EVENT_REMINDER",
                "WAITLIST_NOTIFICATION",
                "PAYMENT_RECEIVED",
                "EVENT_UPDATE",
                "SYSTEM_ANNOUNCEMENT",
                "PASSWORD_RESET",
                "WELCOME",
                name="notificationtype",
            ),
            nullable=False,
        ),
        sa.Column(
            "priority",
            sa.Enum("LOW", "NORMAL", "HIGH", "URGENT", name="notificationpriority"),
            nullable=False,
        ),
        sa.Column("recipient", sa.String(length=255), nullable=False),
        sa.Column("subject", sa.String(length=500), nullable=True),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("template_name", sa.String(length=100), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("attempts", sa.Integer(), nullable=False),
        sa.Column("max_attempts", sa.Integer(), nullable=False),
        sa.Column("next_retry_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("sent_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("failed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["notification_id"],
            ["notifications.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("notification_deliveries", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_notification_deliveries_channel"), ["channel"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notification_deliveries_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notification_deliveries_notification_id"),
            ["notification_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_notification_deliveries_status"), ["status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notification_deliveries_type"), ["type"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notification_deliveries_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "waitlists",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.Column(
            "joined_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("notified_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "WAITING", "NOTIFIED", "CONVERTED", "EXPIRED", name="waitliststatus"
            ),
            nullable=False,
        ),
        sa.Column("number_of_tickets", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        postgresql_tablespace="pg_default",
    )
    with op.batch_alter_table("waitlists", schema=None) as batch_op:
        batch_op.create_index(
            "idx_waitlist_event_joined", ["event_id", "joined_at"], unique=False
        )
        batch_op.create_index(
            "idx_waitlist_event_status", ["event_id", "status"], unique=False
        )
        batch_op.create_index(
            "idx_waitlist_status_joined", ["status", "joined_at"], unique=False
        )
        batch_op.create_index(
            "idx_waitlist_unique_user_event", ["user_id", "event_id"], unique=True
        )
        batch_op.create_index(
            "idx_waitlist_user_status", ["user_id", "status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_waitlists_event_id"), ["event_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_waitlists_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_waitlists_joined_at"), ["joined_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_waitlists_notified_at"), ["notified_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_waitlists_status"), ["status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_waitlists_user_id"), ["user_id"], unique=False
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("waitlists", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_waitlists_user_id"))
        batch_op.drop_index(batch_op.f("ix_waitlists_status"))
        batch_op.drop_index(batch_op.f("ix_waitlists_notified_at"))
        batch_op.drop_index(batch_op.f("ix_waitlists_joined_at"))
        batch_op.drop_index(batch_op.f("ix_waitlists_id"))
        batch_op.drop_index(batch_op.f("ix_waitlists_event_id"))
        batch_op.drop_index("idx_waitlist_user_status")
        batch_op.drop_index("idx_waitlist_unique_user_event")
        batch_op.drop_index("idx_waitlist_status_joined")
        batch_op.drop_index("idx_waitlist_event_status")
        batch_op.drop_index("idx_waitlist_event_joined")

    op.drop_table("waitlists")
    with op.batch_alter_table("notification_deliveries", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_notification_deliveries_user_id"))
        batch_op.drop_index(batch_op.f("ix_notification_deliveries_type"))
        batch_op.drop_index(batch_op.f("ix_notification_deliveries_status"))
        batch_op.drop_index(batch_op.f("ix_notification_deliveries_notification_id"))
        batch_op.drop_index(batch_op.f("ix_notification_deliveries_id"))
        batch_op.drop_index(batch_op.f("ix_notification_deliveries_channel"))

    op.drop_table("notification_deliveries")
    with op.batch_alter_table("bookings", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_bookings_user_id"))
        batch_op.drop_index(batch_op.f("ix_bookings_status"))
        batch_op.drop_index(batch_op.f("ix_bookings_id"))
        batch_op.drop_index(batch_op.f("ix_bookings_event_id"))
        batch_op.drop_index(batch_op.f("ix_bookings_booked_at"))
        batch_op.drop_index("idx_booking_user_status")
        batch_op.drop_index("idx_booking_user_date")
        batch_op.drop_index("idx_booking_status_date")
        batch_op.drop_index("idx_booking_event_status")
        batch_op.drop_index("idx_booking_event_date")
        batch_op.drop_index("idx_booking_date_status")

    op.drop_table("bookings")
    with op.batch_alter_table("notifications", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_notifications_user_id"))
        batch_op.drop_index(batch_op.f("ix_notifications_type"))
        batch_op.drop_index(batch_op.f("ix_notifications_priority"))
        batch_op.drop_index(batch_op.f("ix_notifications_is_read"))
        batch_op.drop_index(batch_op.f("ix_notifications_id"))

    op.drop_table("notifications")
    with op.batch_alter_table("notification_preferences", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_notification_preferences_user_id"))
        batch_op.drop_index(batch_op.f("ix_notification_preferences_id"))

    op.drop_table("notification_preferences")
    with op.batch_alter_table("events", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_events_start_date"))
        batch_op.drop_index(batch_op.f("ix_events_price"))
        batch_op.drop_index(batch_op.f("ix_events_organizer_id"))
        batch_op.drop_index(batch_op.f("ix_events_name"))
        batch_op.drop_index(batch_op.f("ix_events_location"))
        batch_op.drop_index(batch_op.f("ix_events_is_active"))
        batch_op.drop_index(batch_op.f("ix_events_id"))
        batch_op.drop_index(batch_op.f("ix_events_end_date"))
        batch_op.drop_index(batch_op.f("ix_events_created_at"))
        batch_op.drop_index(batch_op.f("ix_events_available_tickets"))
        batch_op.drop_index("idx_event_price_date")
        batch_op.drop_index("idx_event_organizer_active")
        batch_op.drop_index("idx_event_location_date")
        batch_op.drop_index("idx_event_date_location")
        batch_op.drop_index("idx_event_date_active")
        batch_op.drop_index("idx_event_available_tickets")

    op.drop_table("events")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_role"))
        batch_op.drop_index(batch_op.f("ix_users_last_login"))
        batch_op.drop_index(batch_op.f("ix_users_is_active"))
        batch_op.drop_index(batch_op.f("ix_users_id"))
        batch_op.drop_index(batch_op.f("ix_users_full_name"))
        batch_op.drop_index(batch_op.f("ix_users_email"))
        batch_op.drop_index(batch_op.f("ix_users_created_at"))
        batch_op.drop_index("idx_user_created_role")
        batch_op.drop_index("idx_user_active_role")

    op.drop_table("users")
    # ### end Alembic commands ###
