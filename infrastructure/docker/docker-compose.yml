version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: evently-postgres
    environment:
      POSTGRES_DB: evently
      POSTGRES_USER: evently_user
      POSTGRES_PASSWORD: evently_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - evently-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U evently_user -d evently"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: evently-redis
    command: redis-server --requirepass evently_redis_password --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - evently-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Evently API
  evently-api:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.production
      target: production
    container_name: evently-api
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=evently
      - DB_USER=evently_user
      - DB_PASSWORD=evently_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=evently_redis_password
      - SECRET_KEY=your-super-secret-development-key
      - CELERY_BROKER_URL=redis://:evently_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:evently_redis_password@redis:6379/2
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    networks:
      - evently-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Worker
  evently-worker:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.production
      target: worker
    container_name: evently-worker
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=evently
      - DB_USER=evently_user
      - DB_PASSWORD=evently_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=evently_redis_password
      - SECRET_KEY=your-super-secret-development-key
      - CELERY_BROKER_URL=redis://:evently_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:evently_redis_password@redis:6379/2
    volumes:
      - ./logs:/app/logs
    networks:
      - evently-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

  # Celery Beat Scheduler
  evently-beat:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.production
      target: beat
    container_name: evently-beat
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=evently
      - DB_USER=evently_user
      - DB_PASSWORD=evently_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=evently_redis_password
      - SECRET_KEY=your-super-secret-development-key
      - CELERY_BROKER_URL=redis://:evently_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:evently_redis_password@redis:6379/2
    volumes:
      - ./logs:/app/logs
      - beat_schedule:/app/beat-schedule
    networks:
      - evently-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Flower Celery Monitoring
  evently-flower:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.production
      target: flower
    container_name: evently-flower
    environment:
      - ENVIRONMENT=development
      - CELERY_BROKER_URL=redis://:evently_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:evently_redis_password@redis:6379/2
      - CELERY_FLOWER_PASSWORD=flower_password
    ports:
      - "5555:5555"
    networks:
      - evently-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: evently-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - evently-network
    depends_on:
      - evently-api
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: evently-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - evently-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: evently-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_password
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - evently-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  beat_schedule:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  evently-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
